name: Send Email Notification on Commit to Main

on:
  push:
    branches:
      - main  # Trigger only when there's a push to `main` branch

jobs:
  send-email:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install necessary Python packages
        run: |
          pip install smtplib

      - name: Send Email Notification
        run: |
          echo "Sending email notification..."
          python3 -c "
          import smtplib
          from email.mime.multipart import MIMEMultipart
          from email.mime.text import MIMEText
          import os
          
          # Get GitHub Actor and Commit Message
          actor = os.getenv('GITHUB_ACTOR')
          commit_message = os.getenv('GITHUB_COMMIT_MESSAGE')
          
          # Email details
          sender_email = os.getenv('OUTLOOK_EMAIL')
          receiver_email = os.getenv('MAIN_BRANCH_OWNER_EMAIL')  # Owner email from secret
          password = os.getenv('OUTLOOK_PASSWORD')
          
          # Email content
          subject = 'New commit pushed to main branch'
          body = f'''
          Hello,
          
          A new commit has been pushed to the 'main' branch by {actor}.
          
          Commit Message:
          {commit_message}
          
          Best regards,
          Your GitHub Actions CI
          '''
          
          # Setup the MIME
          msg = MIMEMultipart()
          msg['From'] = sender_email
          msg['To'] = receiver_email
          msg['Subject'] = subject
          msg.attach(MIMEText(body, 'plain'))
          
          # SMTP server configuration
          smtp_server = 'smtp-mail.outlook.com'
          smtp_port = 587
          
          # Send the email
          try:
              server = smtplib.SMTP(smtp_server, smtp_port)
              server.starttls()  # Start TLS encryption
              server.login(sender_email, password)
              text = msg.as_string()
              server.sendmail(sender_email, receiver_email, text)
              print('Email sent successfully!')
          except Exception as e:
              print(f'Error sending email: {e}')
          finally:
              server.quit()
                    "
                  env:
                    OUTLOOK_EMAIL: ${{ secrets.OUTLOOK_EMAIL }}  # Your Outlook email
                    OUTLOOK_PASSWORD: ${{ secrets.OUTLOOK_PASSWORD }}  # Your Outlook password
                    MAIN_BRANCH_OWNER_EMAIL: ${{ secrets.MAIN_BRANCH_OWNER_EMAIL }}  # Owner's email address (stored as GitHub secret)
                    GITHUB_ACTOR: ${{ github.actor }}  # GitHub actor (commit author)
                    GITHUB_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}  # Commit message from the push event
